// Implementation File

// Files included
#include "StandardFiles.h"
#include "StringAlgorithms.h"
#include "Typify.h"


/*============================================================================//
    Conversion.template: implementation file for Conversion.h.

    Implementation: Shane J. Neph, June 2004, University of Washington
//============================================================================*/


namespace ConversionSpace {
    // U --> std::string
    template <typename U>
    std::string toconvert(TypeDefine::Type2Type<std::string>, U from) {
        std::stringstream f;
        f << from;
        return(f.str());
    }

    // U --> const std::string
    template <typename U>
    std::string toconvert(TypeDefine::Type2Type<const std::string>, U from) {
        std::stringstream f;
        f << from;
        return(f.str());
    } 

    // std::string --> U
    template <typename U>
    U toconvert(TypeDefine::Type2Type<U>, const std::string& from) {
        U tortn;
        std::stringstream f(from);
        f >> tortn;
        return(tortn);
    }
/* This gives some function overload problems - not used right now
    //  U --> T
    template <typename T, typename U>
    T toconvert(TypeDef::Type2Type<T>, U from) {
        return(static_cast<T>(from));
    }
*/
} // end ConversionSpace



//===================
// convert<ToType>()
//===================
template <typename RtnType, typename From>
RtnType convert(From from) {
    return(ConversionSpace::toconvert(TypeDefine::Type2Type<RtnType>(), from));
}

